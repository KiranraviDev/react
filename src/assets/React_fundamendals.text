React is a popular JavaScript library for building user interfaces. Here are some fundamental topics in React that you should be familiar with:

    Components:
        React applications are built using components, which are reusable and independent pieces of UI.
        Components can be either functional (stateless) or class-based (stateful).

    JSX (JavaScript XML):
        JSX is a syntax extension for JavaScript that looks similar to XML or HTML.
        It allows you to write HTML elements and components in a JavaScript file.

    Props (Properties):
        Props are used to pass data from a parent component to a child component.
        They are read-only and cannot be modified by the child component.

    State:
        State is used to manage the internal data offreeze a component.
        Class components have state, while functional components use the useState hook to manage state.

    Lifecycle Methods (Class Components):
        Class components have lifecycle methods, such as componentDidMount, componentDidUpdate, and componentWillUnmount.
        These methods allow you to perform actions at different stages of a component's life.

    Hooks (Functional Components):
        Hooks are functions that allow functional components to use state and lifecycle features.
        Common hooks include useState, useEffect, useContext, etc.

    Event Handling:
        React uses camelCase for event handling, such as onClick instead of onclick.
        Event handlers are defined as functions in your components.

    Conditional Rendering:
        Conditional rendering allows you to show or hide components based on certain conditions.
        You can use conditional statements or the ternary operator for conditional rendering.

    Lists and Keys:
        React provides the map function to iterate over arrays and render a list of components.
        Each item in a list should have a unique "key" prop.

    Forms in React:
        React handles form elements like any other DOM elements.
        You can use controlled components to manage the state of form elements.

    React Router:
        React Router is a library for handling navigation in React applications.
        It enables the creation of routes to different components.

    State Management (Redux):
        For larger applications, state management libraries like Redux are often used to manage the application state in a centralized manner.

    Context API:
        The Context API allows you to share values (like themes or authentication status) across the component tree without explicitly passing props at every level.

    Error Boundaries:
        Error boundaries are components that catch JavaScript errors anywhere in their child component tree and log those errors.

    Higher-Order Components (HOC) and Render Props:
        Techniques for code reuse and component composition.

    React Hooks:
        Introduced in React 16.8, hooks allow functional components to use state and lifecycle features without needing class components.


React Interview Data

Stage - I (0:01 - 27:00 mins)

1. What is React ? What is the role of react in the software development ?

 ex : user (req)  (hit the server)-> client / frontend server --> API Server/ Middleware --> Database(Backend)
     user (req)  (Recive) <-- client / frontend server <-- API Server/ Middleware <-- Database(Backend)

     in this cycle "client / frontend server" is React library.

     3 main poin about React:   This is a Opensourse Javascript library , 
                                used for building UI , 
                                React simplifies the creattion of SPA (Single Page Application) by Reusable Components.
     

2. Key Features of React ? 

   1. Virtual DOM  (minimizing direct manipuation of the actual DOM, resulting i improved perfomance.)
   2. Component Based Architecture
   3. Reusablity and Composition
   4. JSX (Javascript XML)
   5. Declarative Syntax
   6. Community and Ecosystem
   7. React Hooks

3. What is DOM ?
   (Document Objecet Model) - represents the webpage as a tree like structure which allows js to dynamically access the content and structre of a web page.
    HTML is a Markup Language only.

4. What is Virtual DOM ? what are the diff between the DOM vs VDOM ?
    if a user change a h1 tag text . the whole DOM will be re renderd.
    in VDOM - this create a DOM copy and show to the user (copy of real DOM is called VDOM)
    i VDOM if the user make a change the DOM will render the changed element only. not the Whole DOM.
    this is called (Re-concilition).this helps to improve the perfomence and make the application more responsive.

5.What are React Components ? what are the main element of this?

  Component is a Reusable Building-blocks for creating UI.

    code:
    import React from "react";

    function App(){
        return(
            log("This is a React Reusable component Syntax")
        )
    }
    export default App;

   
6. What is SPA (Single Page Application) ?

   if a new element added of modified in the website. the webpage will not re render. shows the single page of web and 
   update the modified element data only. this is called SPA.
   ex: youtube . if we click the video recommandation. the site will not re render. the page component only render.
   this is called SPA.

   SPA have a single page  for render a webpage.
   whenever user trigger a function the page data dynamically changes in a single page.

7. What are the Advantages of React ?

   1. React used for build a Single Page Application.(by using the components)
   2. React is cross-platform and open source ( Free to use)
   3. Lightweight and Fast (VDOM)
   4. Large Community and Ecosystem
   5. Easy to Test the UI.

8. What are the Dis-Advantages in React ?

   1.React not good for Small Application.

9. What is the Role of JSX in React ?

    HTML + Javascript = (Javascript XML).
    bable convert the JSX into Javascript.

10. Declarative (vs) Imperative code ?
     
    "React" is a Declarative syntax and Declarative code.

    <h1>Hello React</h1> // in this case the JSX is say to the browser. 
    "hey, create and read a h1 element and show the text..."

    pure Javascript is (Imperative syntax code)


    END OF BASIC - I
____________________________________________________________________________________________________________________________________

Basic - II 

1. What is Arrow function expression in JSX ?

   Regular function Declaration : a function and a name of function and the rounded brakets.

   function App (props){
    return (
        <h1>{props.text}</h1>
    )
   }

   export default App;

   Arrorw function expression: 

   Declaring a function using the Arrorw is called Arrorw function expression.
   this is a combination of Arrow funtion & function expression.
   this is a consice way of declaring a function.(consice : giving a lot of information clearly and in a few words; brief but comprehensive.)


   const App = (props) =>{
    return (
        <h1>{props.text}</h1>
    )
   }
   export default App;


2. How to setup 